buildscript {
    ext {
        junit_version = '4.12'
        kotlin_version = '1.3.20'
        spigot_version = '1.12.2-R0.1-SNAPSHOT'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.20'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
}

group 'io.github.straaaa'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'spigot-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: junit_version
    testRuntimeOnly group: 'junit', name: 'junit', version: junit_version
    compileOnly 'org.spigotmc:spigot-api:1.12.2-R0.1-SNAPSHOT'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.6.21"
}

def targetJavaVersion = 1.8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    duplicatesStrategy = 'exclude'
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileJava {
    options.release
}
compileTestJava {
    options.release
}
jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

shadowJar {

}